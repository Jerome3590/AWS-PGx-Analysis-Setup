---
title: "CloudFront Private URLs"
author: "Jerome Dixon"
format: html
editor: visual
---

```{r load-libraries}

library(reticulate)
library(readr)
library(utils)

```

### Create CloudFront Distribution with Origin Access Control (OAC)

```{python}

import boto3

session = boto3.Session(profile_name='mushin')
client = session.client('cloudfront')

# Create an Origin Access Control
response = client.create_origin_access_control(
    OriginAccessControlConfig={
        'Name': 'OAC for specific distribution',
        'Description': 'Origin Access Control for ILS Dashboard',
        'SigningBehavior': 'always',
        'SigningProtocol': 'sigv4',
        'OriginAccessControlOriginType': 's3',
        'CallerReference': str(time.time())  # Using current time as a unique reference
    }
)

oac_id = response['OriginAccessControl']['Id']
oac_arn = response['OriginAccessControl']['Arn']

print("Origin Access Control ID:", oac_id)
print("Origin Access Control ARN:", oac_arn)

```

### Upload .html content to AWS S3

- Bucket: 'jdixon-ils-research'
          Domain name: jdixon-ils-research.s3.us-east-1.amazonaws.com'

### Create CloudFront Distribution for S3 Bucket

```{python}

import boto3

session = boto3.Session(profile_name='mushin')
client = session.client('cloudfront')

origin = {
    'Id': 'S3-Origin',
    'DomainName': 'jdixon-ils-research.s3.us-east-1.amazonaws.com',
    'S3OriginConfig': {
        'OriginAccessIdentity': f'origin-access-identity/cloudfront/{oac_id}'
    }
}

# Define the distribution configuration
distribution = {
    'CallerReference': 'ils-dashboard-2024',
    'Comment': 'ILS Dashboard',
    'Enabled': True,
    'Origins': {
        'Quantity': 1,
        'Items': [origin]
    },
    'DefaultCacheBehavior': {
        'TargetOriginId': 'S3-Origin',
        'ViewerProtocolPolicy': 'redirect-to-https',
        'AllowedMethods': {
            'Quantity': 3,
            'Items': ['GET', 'HEAD', 'OPTIONS'],
            'CachedMethods': {
                'Quantity': 2,
                'Items': ['GET', 'HEAD']
            }
        },
        'ForwardedValues': {
            'QueryString': False,
            'Cookies': {'Forward': 'none'}
        },
        'MinTTL': 3600
    }
}

# Create distribution
response2 = client.create_distribution(DistributionConfig=distribution)
print(response2)

```

### Configure CloudFront Distribution for Signed URLs

```{python}

import boto3

session = boto3.Session(profile_name='mushin')
client = session.client('cloudfront')

# Get distribution ID and ETag
distribution_id = response2['Distribution']['Id']
distribution_config = client.get_distribution_config(Id=distribution_id)
config = distribution_config['DistributionConfig']
etag = distribution_config['ETag']

# Update the distribution to require signed URLs
config['DefaultCacheBehavior']['TrustedSigners'] = {
    'Enabled': True,
    'Quantity': 1,
    'Items': ['self']
}
config['DefaultCacheBehavior']['ViewerProtocolPolicy'] = 'redirect-to-https'
config['DefaultCacheBehavior']['MinTTL'] = 3600

# Submit the updated distribution configuration
response3 = client.update_distribution(
    DistributionConfig=config,
    Id=distribution_id,
    IfMatch=etag
)

print(response3)

```

#### Security Keys

```{python eval=FALSE}

from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes

# Generate private key
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
)

# Serialize private key to PEM format and save it to a file
with open('keys/private_key.pem', 'wb') as f:
    f.write(private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    ))

# Generate public key from private key
public_key = private_key.public_key()

# Serialize public key to PEM format and save it to a file
with open('keys/public_key.pem', 'wb') as f:
    f.write(public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    ))

# Load the private key from a file for signing
with open('keys/private_key.pem', 'rb') as key_file:
    loaded_private_key = serialization.load_pem_private_key(
        key_file.read(),
        password=None,
    )


# Public key for upload to CloudFront
with open('keys/public_key.pem', 'r') as f:
    print("Public Key:", f.read())


```

#### Upload Public Key to CloudFront

![Upload Public Key from AWS Console](images/public_key_cloudfront.png)

#### Add Public Key to Distribution via Key Groups

![Add Public Key via Key Groups to Cloudfront Distribution](images/key_group_add_to_distribution.png)

### Process HTML files for Signed URL

```{bash process-html-files, eval=FALSE}

# Define the AWS profile and bucket name
profile_name="mushin"
bucket_project="jdixon-ils-research"
key_pair_id="K3FDX9U37CBBBO"
private_key_path="keys/private_key.pem"
expiration_date="2024-11-27"

# File to store the resulting CSV
output_csv="signed_urls.csv"

# Start the CSV with headers
echo "HTML Object,Signed URL" > $output_csv

# List all .html files in the S3 bucket
html_files=$(aws s3api list-objects-v2 --bucket $bucket_project --query "Contents[?contains(Key, '.html')].Key" --output text --profile $profile_name)

# Loop through each HTML file to generate a signed URL
for html_file in $html_files; do
    signed_url=$(aws cloudfront sign --url "https://d1nbcefqu4d4e0.cloudfront.net/${html_file}" --key-pair-id $key_pair_id --private-key file://$private_key_path --date-less-than "$expiration_date" --profile $profile_name)
    
    # Append the HTML file path and its signed URL to the CSV
    echo "$html_file,$signed_url" >> $output_csv
done

# Display the path to the CSV file
echo "Signed URLs have been saved to $output_csv"


```

### Signed URLs (Expire 11-27-2024)

```{r}

signed_urls <- read_csv("signed_urls.csv", show_col_types = FALSE)

signed_urls[,2]

```

#### Test

```{r}

url_qs <- signed_urls %>%
  filter(grepl('opioid_prescription_drug_network', `Signed URL`)) %>% 
  mutate(cohort = sub(".*?(cohort\\d+).*", "\\1", `HTML Object`))

url_qs[[1,2]]

```

```{r}
write_csv(url_qs,"quicksight_urls.csv")
```


```{r}

# Define the part to remove
part_to_remove <- "https://d1nbcefqu4d4e0.cloudfront.net/analysis_workflow1/"

# Remove the specified part from the URL
clean_url <- gsub(part_to_remove, "", url)

# Construct the ifelse statement for QuickSight calculated field
quicksight_expression <- "ifelse("

# Loop through each row in the dataframe
for (i in 1:nrow(url_qs)) {
    cohort <- sub(".*?(cohort\\d+).*", "\\1", url_qs$`HTML Object`[i])
    url <- gsub(part_to_remove, "", url_qs$`Signed URL`[i])
    
    # Append to the ifelse expression
    if (i < nrow(url_qs)) {
        quicksight_expression <- paste0(quicksight_expression, "{partition_1}='", cohort, "', '", url, "', ")
    } else {
        # For the last item, close the ifelse
        quicksight_expression <- paste0(quicksight_expression, "'", url, "')")
    }
}

# Output the calculated field expression
cat(quicksight_expression)

```

```{r}
# Loop through the URLs and open each one
apply(url_test[, 2, drop = FALSE], 1, function(url) {
  browseURL(as.character(url))
})



```

#### Logs

```{python}

import boto3

session = boto3.Session(profile_name='mushin')
client = session.client('cloudfront')

# Specify the ID of your distribution
distribution_id = 'E3FKBD5BT7YMAT'

# Get the current distribution config
response = client.get_distribution_config(Id=distribution_id)
config = response['DistributionConfig']
etag = response['ETag']

# Set up the logging configuration
config['Logging'] = {
    'Enabled': True,
    'IncludeCookies': True,
    'Bucket': 'aws-logs-535362115856-us-east-1.s3.amazonaws.com',
    'Prefix': 'dashboard/'
}

# Update the distribution with the new logging settings
client.update_distribution(DistributionConfig=config, Id=distribution_id, IfMatch=etag)

```



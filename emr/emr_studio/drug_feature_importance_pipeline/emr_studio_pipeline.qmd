---
title: "EMR Studio: Drug Feature Analysis Jupyter Notebook Pipeline"
format: html
editor: visual
---

## Run EMR Studio Notebook

### Start Cluster

```{bash}

aws emr create-cluster \
 --name "pgx-analysis-ascpt" \
 --log-uri "s3://athena-output-testing-pgx/elasticmapreduce" \
 --release-label "emr-7.5.0" \
 --service-role "arn:aws:iam::$aws_account:role/EMR_DefaultRole" \
 --security-configuration "pgx_emr2" \
 --managed-scaling-policy '{"ComputeLimits":{"UnitType":"Instances","MinimumCapacityUnits":3,"MaximumCapacityUnits":100,"MaximumOnDemandCapacityUnits":100,"MaximumCoreCapacityUnits":100}}' \
 --unhealthy-node-replacement \
 --ec2-attributes '{"InstanceProfile":"EMR_EC2_DefaultRole","EmrManagedMasterSecurityGroup":"sg-0a5260eee9a20654e","EmrManagedSlaveSecurityGroup":"sg-0f01580b24ea364e1","KeyName":"mushin_pgx","AdditionalMasterSecurityGroups":[],"AdditionalSlaveSecurityGroups":[],"ServiceAccessSecurityGroup":"sg-0e25102a082ef38d1","SubnetId":"subnet-03f689fd2cb8cbb2c"}' \
 --tags 'creator=CREATE_CLUSTER_TAB_IN_JUPYTERLAB_PLUGIN' \
 --applications Name=Hadoop Name=JupyterEnterpriseGateway Name=Livy Name=Spark \
 --configurations '[{"Classification":"livy-conf","Properties":{"livy.server.session.timeout":"6h","livy.spark.deploy-mode":"cluster"}},{"Classification":"spark-hive-site","Properties":{"hive.metastore.client.factory.class":"com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory"}}]' \
 --instance-groups '[{"InstanceCount":1,"InstanceGroupType":"MASTER","Name":"master","InstanceType":"m2.2xlarge","EbsConfiguration":{"EbsBlockDeviceConfigs":[{"VolumeSpecification":{"VolumeType":"gp2","SizeInGB":32},"VolumesPerInstance":2}],"EbsOptimized":false}},{"InstanceCount":3,"InstanceGroupType":"CORE","Name":"slave","InstanceType":"m2.2xlarge","EbsConfiguration":{"EbsBlockDeviceConfigs":[{"VolumeSpecification":{"VolumeType":"gp2","SizeInGB":32},"VolumesPerInstance":2}],"EbsOptimized":false}}]' \
 --bootstrap-actions '[{"Args":[],"Name":"pgx","Path":"s3://pgx-repository/emr-config/pgx_emr_studio_python39_bootstrap.sh"}]' \
 --auto-scaling-role "arn:aws:iam::$aws_account:role/EMR_AutoScaling_DefaultRole" \
 --scale-down-behavior "TERMINATE_AT_TASK_COMPLETION" \
 --ebs-root-volume-size "97" \
 --auto-termination-policy '{"IdleTimeout":3600}' \
 --region "us-east-1" \
 --profile pgx

```

### Studio ID

```{bash}

STUDIO_ID=$(aws emr list-studios --profile pgx --output json | jq -r '.Studios[0].StudioId')
export STUDIO_ID
echo "Studio ID: $STUDIO_ID"

```

```{bash}

aws emr describe-studio --studio-id $STUDIO_ID --profile pgx

```

### Workspace ID (AWS Console)

![Workspace Id](images/workspace_id.png)

### Cluster ID

```{bash}

# Set the working directory
CWD=$(pwd)

# Get EMR cluster info and save it to a JSON file
aws emr list-clusters --active --profile pgx | tee "${CWD}/emr/cluster-config/cluster_info.json"

# Parse the cluster ID from the JSON file using jq
CLUSTER_ID=$(jq -r '.Clusters[0].Id' "${CWD}/emr/cluster-config/cluster_info.json")

# Export the cluster ID as an environment variable
export CLUSTER_ID="$CLUSTER_ID"

# Output the cluster ID for verification
echo "Cluster ID: $CLUSTER_ID"


```

### Start Notebook Execution with Parameters

```{bash}

aws emr start-notebook-execution \
  --editor-id $workspace_id \
  --notebook-params '{"cohort" : "cohort1", "cohort_num" : 1}' \
  --relative-path pipeline/0_cohort_dataset_builder.ipynb \
  --notebook-execution-name BUILD_DS \
  --execution-engine "{\"Id\": \"$CLUSTER_ID\"}" \
  --service-role EMRStudio_Service_Role \
  --profile pgx


```

```{bash}

# Retrieve Notebook Execution ID
NOTEBOOK_EXECUTION_ID=$(aws emr list-notebook-executions --studio-id "$STUDIO_ID" --profile pgx --output json | jq -r '.NotebookExecutions[0].NotebookExecutionId')
export NOTEBOOK_EXECUTION_ID
echo "Notebook Execution ID: $NOTEBOOK_EXECUTION_ID"

# Describe the Notebook Execution
if [ -n "$NOTEBOOK_EXECUTION_ID" ]; then
  aws emr describe-notebook-execution --notebook-execution-id "$NOTEBOOK_EXECUTION_ID" --profile pgx
else
  echo "No Notebook Execution ID found for Studio ID: $STUDIO_ID"
fi

```
